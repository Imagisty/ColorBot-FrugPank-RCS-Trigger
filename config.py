import numpy as np
from mss import mss


def get_screen_resolution():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
    try:
        with mss() as sct:
            screen = sct.monitors[1]  # –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–Ω–∏—Ç–æ—Ä
            return screen["width"], screen["height"]
    except:
        return 1920, 1080  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


# –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
SCREEN_WIDTH, SCREEN_HEIGHT = get_screen_resolution()

# –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—ç—Ç–∞–ª–æ–Ω–Ω–æ–µ)
BASE_WIDTH = 1920
BASE_HEIGHT = 1080

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
SCALE_FACTOR_X = SCREEN_WIDTH / BASE_WIDTH
SCALE_FACTOR_Y = SCREEN_HEIGHT / BASE_HEIGHT
SCALE_FACTOR_COMBINED = min(SCALE_FACTOR_X, SCALE_FACTOR_Y)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã FPS –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
TARGET_FPS = 60
FRAME_TIME = 1.0 / TARGET_FPS

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏
DETECTION_AREA_MIN = 50

# –ì—Ä–∞–Ω–∏—Ü—ã —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–Ω–µ–æ–Ω–æ–≤–æ-—Ä–æ–∑–æ–≤—ã–π)
COLOR_RANGES = {
    "neon_pink1": {"lower": np.array([145, 100, 150]), "upper": np.array([165, 255, 255])},
    "neon_pink2": {"lower": np.array([135, 120, 180]), "upper": np.array([155, 255, 255])},
    "magenta": {"lower": np.array([140, 150, 200]), "upper": np.array([170, 255, 255])}
}

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–ï–ó –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
DEFAULT_SETTINGS = {
    "min_area": 1000,  # –ë–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    "scale_factor": 0.4,
    "fill_strength": 0.5,
    "pixel_expansion": 0.8,
    "contour_fill_aggressive": 1.0,
    "precise_center_mode": True,
    "center_bias_x": 0.0,
    "center_bias_y": 0.0,
    "instant_snap_mode": True,
    "smoothing_factor": 0.9,
    "snap_sensitivity": 0.8,
    "recoil_vertical": 0.2,
    "recoil_horizontal": -0.15,
    "capture_zone_size": 100.0,
    "shoot_delay": 1,

    # –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò: –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç –∑–æ–Ω—ã –∑–∞—Ö–≤–∞—Ç–∞
    "max_aim_distance": 300,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –∞–∏–º –∞—Å–∏—Å—Ç–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
    "auto_shoot_radius_horizontal": 15,  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –∞–≤—Ç–æ—Å—Ç—Ä–µ–ª—å–±—ã
    "auto_shoot_radius_vertical": 15,  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –∞–≤—Ç–æ—Å—Ç—Ä–µ–ª—å–±—ã
    "recoil_multiplier": 10,  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –æ—Ç–¥–∞—á–∏
}

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–∞–∑–æ–≤—ã–µ —Ä–∞–¥–∏—É—Å—ã –ë–ï–ó –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
DEFAULT_RADIUS_SETTINGS = {
    "auto_shoot_horizontal_radius": 15,  # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è 1920x1080
    "auto_shoot_vertical_radius": 15,
    "auto_aim_horizontal_radius": 400,
    "auto_aim_vertical_radius": 400,
    "auto_aim_detection_area_x": 600,
    "auto_aim_detection_area_y": 600
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞–≤–∏—à –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_KEY_BINDINGS = {
    "toggle_auto_aim": "0",
    "toggle_auto_shoot": "8",
    "toggle_recoil_compensation": "9",
    "increase_recoil_strength": "+",
    "decrease_recoil_strength": "-"
}


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
def normalize_mouse_movement(x, y):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    if SCALE_FACTOR_X > 1.0:  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±–æ–ª—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ
        normalized_x = x / SCALE_FACTOR_X
    else:  # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ
        normalized_x = x * SCALE_FACTOR_X

    if SCALE_FACTOR_Y > 1.0:
        normalized_y = y / SCALE_FACTOR_Y
    else:
        normalized_y = y * SCALE_FACTOR_Y

    return int(normalized_x), int(normalized_y)


def normalize_distance(distance):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
    return distance * SCALE_FACTOR_COMBINED


def normalize_radius(radius_x, radius_y):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏—É—Å–æ–≤ –ø–æ–¥ —Ç–µ–∫—É—â–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ"""
    return int(radius_x * SCALE_FACTOR_X), int(radius_y * SCALE_FACTOR_Y)


def normalize_recoil(vertical, horizontal):
    """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–∞—á–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
    dpi_factor = (SCREEN_WIDTH * SCREEN_HEIGHT) / (BASE_WIDTH * BASE_HEIGHT)

    # –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Ç–µ–º –º–µ–Ω—å—à–µ –Ω—É–∂–Ω–æ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    if dpi_factor > 1.0:
        recoil_scale = 1.0 / np.sqrt(dpi_factor)
    else:
        recoil_scale = np.sqrt(dpi_factor)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    normalized_vertical = vertical * recoil_scale
    normalized_horizontal = horizontal * recoil_scale

    return normalized_vertical, normalized_horizontal


print(f"üñ•Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: {SCREEN_WIDTH}x{SCREEN_HEIGHT}")
print(f"üìè –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: X={SCALE_FACTOR_X:.2f}, Y={SCALE_FACTOR_Y:.2f}, Combined={SCALE_FACTOR_COMBINED:.2f}")
print(f"üéØ –¶–µ–ª–µ–≤–æ–π FPS: {TARGET_FPS}")
